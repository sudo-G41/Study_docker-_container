1강

도커의 등장
2013년 파이콘에서 등장했다. dotCloud사가 파이콘 리이트닝 토크에서 The future of Linux container라는 제목으로 발표한 것이 처음이다.
현재의 도커는 Go언어로 작성 되어 있는데 처음 등장했을 때는 Python으로 작성 되었다고 한다. 해당 발표는 youtube에서 볼 수 있다.
영상을 보면 중간에 데모를 보여주는데 "docker images"라는 명령어로 docker를 실행하고 "docker run -a busybox echo "hello world"명령어를 실행해서  "hello word"를 터미널에 띄우는 장면을 볼 수 있다. 현재 사용되고 있는 명령어랑 좀 다르긴 하지만 컨테이너를 통해 실행되는 장면을 볼 수 있다.
결과만 보면 echo명령어를 사용하나 위의 명령어를 사용하나 똑같아 보이는데 굳이 저렇게 해야 하는 이유가 무엇인가? 이것을 이해하면 도커(컨테이너)를 사용하는 이유를 알 수 있다.
그냥 echo를 사용하는 것은 지금 사용하고 있는 system에서의 터미널 명령어를 사용하여 echo를 사용하는 것이고 docker run을 사용 하는 것은 docker를 통해 클라우드서버의 system상에서 echo를 실행하고 결과를 받아오는 것이다.
이를 확인하는 방법중 하나는 "cat /etc/*-release"(*은 해당 운영체제에 맞는 것으로 ubuntu는 lsb, centos는 centos가 들어간다.)명령어를 통해 해당 os를 확인하는 것이 있다.
busybox는 os라기보다는 Linux를 사용하기위한 최소한의 파일들을 모아놓은 이미지로 Linux환경에 간단한 툴들을 설치해 놓은 것이다. busybox를 살펴보면 busybox를 사용하기 위한 여러 툴들을 볼 수 있습니다.
docker run -it 이미지:버전 echo "안녕!" 이라는 것은 그냥 echo를 띄우는 것이 아닌 서로 다른 환경에서 각각의 환경에 해당하는 echo를 띄워주는 것입니다.
docker는 이미지를 통해서 다양한 환경을 제공하고 있고 이러한 환경에서 실행되는 것들을 컨테이너라고 합니다.
실행되는 환경이 달라짐으로 컨테이너는 가상머신인가? 라는 의문을 들 수 있습니다. 사실 놓고보면 각각의 VM = 서로다른 환경, 각각의 container = 서로다른 환경이라 같아 보이지만 VM은 소프트웨어로 구현된 하드웨어이며 구현된 하드웨어에 OS를 설치하여 작동하며 환경을 제공한다. Container는 Docker위에 있는 각각의 container에 들어 있는 이미지들과 필요한 툴들을 사용하여 제공되는 프로세스들 이다. 필요한 자원이나 하드웨어작업은 Locahost의 OS를 통해 사용하게 된다.
예전에 docker와 비슷한 chroot가 있었는데 난 이거 왜 있는지 모르겠다... 어찌되었던 이건 프로세스 격리를 보여주는 예시라고 합니다.
이미지란 특정 프로세스들을 실행시키기 위한 환경으로 환경을 구성하는 파일들의 집합이라 생각하면 됩니다. 왜 그 OS 설치할때 CD나 USB로 만들기 위해 필요한 파일을 이미지 파일이라 하고 그 안에 여러가지 파일들 있는것 처럼 그러한 것이라 생각 하면 적절한 것 같습니다.
도커가 제공하는 기본적인 아키텍쳐

정리 해보자!

Docker : dotCloud사의 솔로몬 하익스씨가 파이콘에서 발표한 것을 구체화한 오픈소스 소프트웨어이다.
container : 격리된 프로세스로서 어떠한 응용 프로그램을 실행하기 위한 툴들이 모여있는 격리된 공간이다. 실행하기 위한 바이너리 파일, 라이브러리, 이미지파일등 이 모여 있다.
image : 무언가(응용프로그램일 수도 있고 OS일수도 있고 서비스나 시스탬일 수도 있다.)를 실행하기 위해 필요한 최소한의 코드(라이브러리, 바이너리 파일 등 툴들)을 모아둔 단위
Docker에서 image를 다운 받는 방법 : docker(그룹설정이 안되어 있는 등 sudo권한이 필요할 때가 있다. 난 설정해서 상관 없지만... ㅎㅎ 설정 방법은 README.me참고) pull image_name:version(latest라고 하면 최신 버전 받아준다.)하면 된다. 즉 docker image를 pull한다 생각해라! 
